'''
    # Some evaluation experiments (do not mind)
    # checkpoint = torch.load(ARTIFACTS_PATH + '/checkpoint.pt')
    # depth4 w/ material head and oversampling
    checkpoint = download_wandb_checkpoint('marco-pampaloni/napoleon-zero-pytorch/1nhfpsnn', 'checkpoint.pt')

    # depth4 w/ material head
    # checkpoint = download_wandb_checkpoint('marco-pampaloni/napoleon-zero-pytorch/3jwpfj86', 'checkpoint.pt')

    # depth1 w/ material head and aux loss
    # checkpoint = download_wandb_checkpoint('marco-pampaloni/napoleon-zero-pytorch/11bmss3x', 'checkpoint.pt')

    training_loop.load_state(checkpoint)
    print(training_loop.evaluate())

    # startpos
    color = 0
    bitboards

    # startpos, no wqueen
    # color = 0
    # bitboards

    # rnbqkb1r/pppp1ppp/5n2/4p3/2B1P3/8/PPPP1PPP/RNBQK1NR w KQkq - 0 1
    # bitboards

    # rnbqkb1r/pppp1ppp/5n2/4p2Q/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 1 (wqueen en prise)
    # color = 1
    # bitboards

    # rnbqkb1r/ppp2ppp/5n2/3pp3/4Q3/8/PPPPPPPP/RNB1KBNR b KQkq - 0 1 (wqueen en prise)
    # color = 1
    # bitboards

    # r1b1kbnr/pppp1ppp/2n5/4p1q1/3PP3/5N2/PPP2PPP/RNBQKB1R w KQkq - 0 1
    # color = 0
    # bitboards

    # 3R1rk1/5R1p/3N1p2/2pP4/3q4/2K5/5P1P/3r4 w - - 0 1
    # color = 0
    # bitboards

    ############# EVALUATION ON SELECTED POSITIONS #######
    x = torch.as_tensor(np.array([read_bitboards(bitboards)])).float().to(device)
    aux = torch.as_tensor(np.array([[color, 65, 15]])).float().to(device)
    h = model(x, aux)

    print('Predicted score for test position: {h}'.format(h=h.item()))

    ############## SCORES DISTRIBUTION ###################
    # bs = dataset.dataset[training_loop.train_dataloader.dataset.indices]
    # aux = dataset.aux[training_loop.train_dataloader.dataset.indices]
    # color = aux[:, 0]
    # scores = dataset.scores[training_loop.train_dataloader.dataset.indices]
    # # ds = training_loop.train_dataloader.dataset.dataset
    # # bs = ds.dataset
    # # aux = ds.aux
    # # scores = ds.scores
    # print(len(bs))
    # print('WHITE TO MOVE')
    # print(f'scores > 1.0: {len(bs[(scores > 1.0) & (color == 0)])}')
    # print(f'scores > 5.0: {len(bs[(scores > 5.0) & (color == 0)])}')
    # print(f'scores > 9.0: {len(bs[(scores > 9.0) & (color == 0)])}')

    # print(f'scores < -1.0: {len(bs[(scores < -1.0) & (color == 0)])}')
    # print(f'scores < -5.0: {len(bs[(scores < -5.0) & (color == 0)])}')
    # print(f'scores < -9.0: {len(bs[(scores < -9.0) & (color == 0)])}')

    # print('BLACK TO MOVE')
    # print(f'scores > 1.0: {len(bs[(scores > 1.0) & (color == 1)])}')
    # print(f'scores > 5.0: {len(bs[(scores > 5.0) & (color == 1)])}')
    # print(f'scores > 9.0: {len(bs[(scores > 9.0) & (color == 1)])}')

    # print(f'scores < -1.0: {len(bs[(scores < -1.0) & (color == 1)])}')
    # print(f'scores < -5.0: {len(bs[(scores < -5.0) & (color == 1)])}')
    # print(f'scores < -9.0: {len(bs[(scores < -9.0) & (color == 1)])}')

    # h, y = training_loop._predict(training_loop.test_dataloader)
    # i_max = np.argmax(abs(h - y))
    # print(f'Max absolute error: {abs(h - y)[i_max]}')
    # print(f'Predicted score: {h[i_max]}')
    # print(f'Target score: {y[i_max]}')
    # print('Bitboard')
    # print(bs[i_max])
    '''
